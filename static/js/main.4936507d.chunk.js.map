{"version":3,"sources":["context.jsx","Todo/TodoItem.jsx","Todo/TodoList.jsx","Todo/AddTodo.jsx","Loader.jsx","Modal/Modal.jsx","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","styles","li","display","justifyContent","alignItems","marginBottom","padding","fontSize","border","borderRadius","input","marginRight","TodoItem","todo","index","itemOnChange","removeTodo","useContext","classes","completed","push","style","className","join","type","checked","onChange","id","title","onClick","ul","listStyle","TodoList","props","todos","map","i","key","onToggle","AddTodo","onCreate","defaultValue","useState","value","setValue","bind","e","target","clear","useInputValue","onSubmit","preventDefault","trim","Loader","Modal","isOpen","setIsOpen","Fragment","App","setTodos","loading","setloading","useEffect","fetch","then","response","json","setTimeout","Provider","filter","concat","Date","now","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"8OAIeA,EAFCC,IAAMC,gBCEhBC,EAAS,CACXC,GAAI,CACAC,QAAS,OACTC,eAAgB,gBAChBC,WAAY,SACZC,aAAc,OACdC,QAAS,OACTC,SAAU,OACVC,OAAQ,iBACRC,aAAc,OAElBC,MAAO,CACHC,YAAa,SA4BNC,MAzBf,YAAkD,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,MAAOC,EAAgB,EAAhBA,aACrBC,EAAeC,qBAAWpB,GAA1BmB,WACFE,EAAU,GAMhB,OAJIL,EAAKM,WACLD,EAAQE,KAAK,QAIb,wBAAIC,MAAOrB,EAAOC,IACd,0BAAMqB,UAAWJ,EAAQK,KAAK,MAC1B,2BAAOC,KAAK,WAAWH,MAAOrB,EAAOU,MAAOe,QAASZ,EAAKM,UAAWO,SAAU,kBAAMX,EAAaF,EAAKc,OACvG,gCAASb,EAAQ,GAChBD,EAAKe,OAEV,4BAAQN,UAAU,aAAaO,QAAS,kBAAMb,EAAWH,EAAKc,MAA9D,UC9BN3B,EAAS,CACX8B,GAAI,CACAxB,QAAS,EACTyB,UAAW,SAoBJC,MAhBf,SAAkBC,GACV,OACA,wBAAIZ,MAAOrB,EAAO8B,IAEVG,EAAMC,MAAMC,KAAI,SAACtB,EAAMuB,GACnB,OAAO,kBAAC,EAAD,CAAUvB,KAAMA,EAAMwB,IAAKxB,EAAKc,GAAIb,MAAOsB,EAAGrB,aAAckB,EAAMK,gBCoB9EC,MArBf,YAAgC,IAAbC,EAAY,EAAZA,SACT9B,EAdV,WAA2C,IAApB+B,EAAmB,uDAAJ,GAAI,EACZC,mBAASD,GADG,mBAC/BE,EAD+B,KACxBC,EADwB,KAGtC,MAAO,CACHC,KAAM,CACFF,QACAjB,SAAU,SAAAoB,GAAC,OAAIF,EAASE,EAAEC,OAAOJ,SAErCK,MAAO,kBAAMJ,EAAS,KACtBD,MAAO,kBAAMA,IAKHM,CAAc,IAY5B,OACI,0BAAMC,SAXV,SAAuBJ,GACnBA,EAAEK,iBAEEzC,EAAMiC,QAAQS,SACdZ,EAAS9B,EAAMiC,SAEfjC,EAAMsC,WAMN,yCAAOxB,KAAK,QAAWd,EAAMmC,OAC7B,4BAAQrB,KAAK,UAAb,cCrBG6B,MARf,WACI,OACI,yBAAK/B,UAAU,wCAAuC,yBAAKA,UAAU,oBACjE,8BAAW,8BAAW,8BAAW,8BAAW,8BAAW,8BAAW,8BAAW,8BAAW,8BAAW,8BAAW,8BAAW,iC,MC2BtHgC,MA7Bf,WAAkB,IAAD,EACexD,IAAM4C,UAAS,GAD9B,mBACNa,EADM,KACEC,EADF,KAWb,OACI,kBAAC,IAAMC,SAAP,KACI,4BAAQ5B,QAVhB,WACI2B,GAAU,KASN,cAEID,GACI,yBAAKjC,UAAU,SACX,yBAAKA,UAAU,cACX,4BAAQA,UAAU,cAAcO,QAXxD,WACI2B,GAAU,KAUU,UACA,4CACA,mZC6CbE,MA7Df,WAAgB,IAAD,EACe5D,IAAM4C,SAAS,IAD9B,mBACJR,EADI,KACGyB,EADH,OAEmB7D,IAAM4C,UAAS,GAFlC,mBAEJkB,EAFI,KAEKC,EAFL,KAyCX,OArCAC,qBAAU,WACNC,MAAM,uDACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAA9B,GAAK,OAAIiC,YAAW,WACtBR,EAASzB,GACT2B,GAAW,KACZ,UACR,IA+BC,kBAAC,EAAQO,SAAT,CAAkBzB,MAAO,CAAE3B,WAjB/B,SAAoBW,GAChBgC,EACIzB,EAAMmC,QAAO,SAAAxD,GAAI,OAAIA,EAAKc,KAAOA,SAgBjC,yBAAKL,UAAU,WACX,wCACA,kBAAC,EAAD,MACA,kBAAC,EAAD,CAASkB,SAfrB,SAAiBZ,GACb+B,EACIzB,EAAMoC,OAAO,CAAC,CACV3C,GAAI4C,KAAKC,MACTrD,WAAW,EACXS,eAYIgC,GAAW,kBAAC,EAAD,MAGX1B,EAAMuC,OACF,kBAAC,EAAD,CAAUvC,MAAOA,EAAOI,SAvC5C,SAAoBX,GAChBgC,EACIzB,EAAMC,KAAI,SAAAtB,GAKN,OAJIA,EAAKc,KAAOA,IACZd,EAAKM,WAAaN,EAAKM,WAGpBN,SAkCC+C,EAAU,GAAK,kDCjDnBc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4936507d.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Context = React.createContext();\r\n\r\nexport default Context;","import React, { useContext } from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport Context from '../context'\r\n\r\nconst styles = {\r\n    li: {\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center',\r\n        marginBottom: '10px',\r\n        padding: '10px',\r\n        fontSize: '20px',\r\n        border: '1px solid #ccc',\r\n        borderRadius: '5px'\r\n    },\r\n    input: {\r\n        marginRight: '10px'\r\n    }\r\n}\r\nfunction TodoItem({ todo, index, itemOnChange }) {\r\n    const { removeTodo } = useContext(Context);\r\n    const classes = [];\r\n\r\n    if (todo.completed) {\r\n        classes.push('done');\r\n    }\r\n\r\n    return (\r\n        <li style={styles.li}>\r\n            <span className={classes.join(' ')}>\r\n                <input type='checkbox' style={styles.input} checked={todo.completed} onChange={() => itemOnChange(todo.id)} />\r\n                <strong>{index + 1}</strong>\r\n                {todo.title}\r\n            </span>\r\n            <button className='remove-btn' onClick={() => removeTodo(todo.id)}>&times;</button>\r\n        </li>\r\n    )\r\n}\r\n\r\nTodoItem.propTypes = {\r\n    todo: PropTypes.object.isRequired,\r\n    index: PropTypes.number\r\n}\r\n\r\nexport default TodoItem","import React from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport TodoItem from './TodoItem';\r\n\r\nconst styles = {\r\n    ul: {\r\n        padding: 0,\r\n        listStyle: 'none'\r\n    }\r\n}\r\n\r\nfunction TodoList(props) {\r\n        return (\r\n        <ul style={styles.ul}>\r\n            {\r\n                props.todos.map((todo, i) => {\r\n                    return <TodoItem todo={todo} key={todo.id} index={i} itemOnChange={props.onToggle}/>\r\n                })\r\n            }\r\n        </ul>\r\n    )\r\n}\r\n\r\nTodoList.propTypes = {\r\n    todos: PropTypes.arrayOf(PropTypes.object).isRequired\r\n}\r\n\r\nexport default TodoList","import React, { useState } from \"react\";\r\n\r\nfunction useInputValue(defaultValue = '') {\r\n    const [value, setValue] = useState(defaultValue);\r\n\r\n    return {\r\n        bind: {\r\n            value,\r\n            onChange: e => setValue(e.target.value)\r\n        },\r\n        clear: () => setValue(''),\r\n        value: () => value\r\n    }\r\n}\r\n\r\nfunction AddTodo({ onCreate }) {\r\n    const input = useInputValue('');\r\n\r\n    function submitHandler(e) {\r\n        e.preventDefault();\r\n\r\n        if (input.value().trim()) {\r\n            onCreate(input.value());\r\n\r\n            input.clear()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={submitHandler}>\r\n            <input type=\"text\" {...input.bind} />\r\n            <button type=\"submit\">Add todo</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default AddTodo","import React from 'react';\r\n\r\nfunction Loader() {\r\n    return (\r\n        <div className=\"loadingio-spinner-spinner-wg4s9mzo1k\"><div className=\"ldio-enyzatthhyk\">\r\n            <div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div>\r\n        </div></div>\r\n    )\r\n}\r\n\r\nexport default Loader","import React from \"react\";\r\nimport \"./Modal.css\";\r\n\r\nfunction Modal() {\r\n    const [isOpen, setIsOpen] = React.useState(false);\r\n\r\n    function showModal() {\r\n        setIsOpen(true)\r\n    }\r\n\r\n    function closeModal() {\r\n        setIsOpen(false)\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <button onClick={showModal}>show modal</button>\r\n            {\r\n                isOpen && (\r\n                    <div className='modal'>\r\n                        <div className='modal-body'>\r\n                            <button className='modal-close' onClick={closeModal}>&#9932;</button>\r\n                            <h1>Modal header</h1>\r\n                            <p>Laudantium natus quam illo exercitationem odio et. Non sint repellat quas voluptas et nihil reprehenderit itaque. Beatae quia deleniti architecto molestiae quod ipsam non corrupti commodi. Quasi veritatis animi similique velit cum optio suscipit et dolor. Eligendi et libero numquam fuga porro rerum atque illum. Dolorem aut omnis qui quia sunt quae corporis corrupti.</p>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            }\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Modal","import React, { useEffect } from 'react';\nimport TodoList from './Todo/TodoList'\nimport Context from './context'\nimport AddTodo from \"./Todo/AddTodo\";\nimport Loader from \"./Loader\";\nimport Modal from './Modal/Modal'\n\nfunction App() {\n    const [todos, setTodos] = React.useState([]);\n    const [loading, setloading] = React.useState(true)\n\n    useEffect(() => {\n        fetch('https://jsonplaceholder.typicode.com/todos?_limit=5')\n            .then(response => response.json())\n            .then(todos => setTimeout(() => {\n                setTodos(todos)\n                setloading(false)\n            }, 2000));\n    }, [])\n\n    function toggleTodo(id) {\n        setTodos(\n            todos.map(todo => {\n                if (todo.id === id) {\n                    todo.completed = !todo.completed;\n                }\n\n                return todo;\n            })\n        )\n    }\n\n    function removeTodo(id) {\n        setTodos(\n            todos.filter(todo => todo.id !== id)\n        )\n    }\n\n    function addTodo(title) {\n        setTodos(\n            todos.concat([{\n                id: Date.now(),\n                completed: false,\n                title\n            }])\n        )\n    }\n\n    return (\n        <Context.Provider value={{ removeTodo }}>\n            <div className='wrapper'>\n                <h1>Todo app</h1>\n                <Modal />\n                <AddTodo onCreate={addTodo}></AddTodo>\n                {\n                    loading && <Loader />\n                }\n                {\n                    todos.length ?\n                        <TodoList todos={todos} onToggle={toggleTodo} />\n                        :\n                        loading ? '' : <h3>No todos found!</h3>\n                }\n            </div>\n        </Context.Provider>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}