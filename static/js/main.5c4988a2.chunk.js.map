{"version":3,"sources":["state/context.jsx","components/TodoItem.jsx","components/TodoList.jsx","components/AddTodo.jsx","components/Loader.jsx","state/Reducer.js","components/About.jsx","components/TodoItemDetails.jsx","components/TodoFind.jsx","components/TodoFilter.jsx","components/TodoNavbar.jsx","components/TodoAlert.jsx","components/TodoAlertsList.jsx","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","styles","li","display","justifyContent","alignItems","marginBottom","padding","fontSize","border","borderRadius","span","input","width","height","margin","TodoItem","todo","index","dispatch","useContext","classes","history","useHistory","completed","push","ListGroup","Item","style","variant","className","onClick","e","target","classList","contains","id","itemClickHandler","join","type","checked","onChange","payload","title","Button","TodoList","props","todos","map","i","key","AddTodo","state","bind","value","addTodoValue","clear","useInputValue","inputEl","useRef","Form","onSubmit","preventDefault","trim","current","focus","InputGroup","FormControl","ref","Append","Loader","Reducer","loading","filteredTodos","Date","now","filter","item","modalOpened","findTodoValue","filterValue","includes","alerts","About","Container","Jumbotron","TodoItemDetails","useParams","TodoFind","Group","Control","placeholder","findHandler","TodoFilter","filterClick","Check","inline","label","TodoNavbar","Navbar","bg","Brand","Nav","exact","to","TodoAlert","alertText","Toast","autohide","delay","animation","onClose","minWidth","Header","Body","TodoAlertsList","position","top","right","zIndex","TransitionGroup","component","toast","CSSTransition","timeout","enter","classNames","App","useReducer","useEffect","fetch","then","response","json","setTimeout","basename","process","path","Provider","fluid","Row","Col","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5c4988a2.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Context = React.createContext();\r\n\r\nexport default Context;","import React, { useContext } from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport Context from '../state/context'\r\nimport { useHistory } from 'react-router-dom';\r\nimport { Button, ListGroup } from 'react-bootstrap';\r\n\r\nconst styles = {\r\n    li: {\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center',\r\n        marginBottom: '10px',\r\n        padding: '20px',\r\n        fontSize: '20px',\r\n        border: '1px solid #ccc',\r\n        borderRadius: '5px'\r\n    },\r\n    span: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n    },\r\n    input: {\r\n        width: '25px',\r\n        height: '25px',\r\n        margin: '0 10px 0 0'\r\n    }\r\n}\r\nfunction TodoItem({ todo, index }) {\r\n    const { dispatch } = useContext(Context);\r\n    const classes = [];\r\n\r\n    let history = useHistory();\r\n\r\n    if (todo.completed) {\r\n        classes.push('done');\r\n    }\r\n\r\n    function itemClickHandler(e) {\r\n        if (e.target.classList.contains('todo-item')) {\r\n            history.push('/' + todo.id);\r\n        }\r\n    }\r\n\r\n    function inputChangeHandler() {\r\n        dispatch({ type: 'TOGGLE_TODO', payload: todo.id })\r\n    }\r\n\r\n    function removeBtnHandler() {\r\n        dispatch({ type: 'REMOVE_TODO', payload: todo.id })\r\n        dispatch({ type: 'SHOW_ALERT', payload: 'remove' })\r\n    }\r\n\r\n    return (\r\n        <ListGroup.Item\r\n            style={styles.li}\r\n            variant='secondary'\r\n            className='todo-item'\r\n            onClick={(e) => itemClickHandler(e)}\r\n        >\r\n            <span className={classes.join(' ')} style={styles.span}>\r\n                <input type='checkbox'\r\n                    style={styles.input}\r\n                    checked={todo.completed}\r\n                    onChange={inputChangeHandler}\r\n                />\r\n                <strong>{index + 1}.</strong>&nbsp;\r\n                {todo.title}\r\n            </span>\r\n            <Button\r\n                className='remove-btn'\r\n                variant='danger'\r\n                onClick={removeBtnHandler}\r\n            >\r\n                &times;\r\n            </Button>\r\n        </ListGroup.Item>\r\n    )\r\n}\r\n\r\nTodoItem.propTypes = {\r\n    todo: PropTypes.object.isRequired,\r\n    index: PropTypes.number\r\n}\r\n\r\nexport default TodoItem","import React from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport TodoItem from './TodoItem';\r\nimport { ListGroup } from 'react-bootstrap';\r\n\r\nfunction TodoList(props) {\r\n    return (\r\n        <ListGroup>\r\n            {\r\n                props.todos.map((todo, i) => {\r\n                    return <TodoItem todo={todo} key={todo.id} index={i} />\r\n                })\r\n            }\r\n        </ListGroup>\r\n    )\r\n}\r\n\r\nTodoList.propTypes = {\r\n    todos: PropTypes.arrayOf(PropTypes.object).isRequired\r\n}\r\n\r\nexport default TodoList\r\n\r\nTodoList.propTypes = {\r\n    todos: PropTypes.arrayOf(PropTypes.object).isRequired\r\n}","import React, { useContext, useRef } from 'react';\r\nimport { Button, Form, FormControl, InputGroup } from 'react-bootstrap';\r\nimport Context from '../state/context';\r\n\r\nfunction useInputValue(state, dispatch) {\r\n    return {\r\n        bind: {\r\n            value: state.addTodoValue,\r\n            onChange: e => dispatch({ type: 'SET_NEWTODO_VALUE', payload: e.target.value })\r\n\r\n        },\r\n        clear: () => dispatch({ type: 'SET_NEWTODO_VALUE', payload: '' }),\r\n        value: () => state.addTodoValue\r\n    }\r\n}\r\n\r\nfunction AddTodo() {\r\n    const { state, dispatch } = useContext(Context);\r\n    const input = useInputValue(state, dispatch);\r\n    const inputEl = useRef(null);\r\n\r\n    function submitHandler(e) {\r\n        e.preventDefault();\r\n\r\n        if (input.value().trim()) {\r\n            dispatch({\r\n                type: 'ADD_TODO',\r\n                payload: input.value()\r\n            });\r\n\r\n            dispatch({\r\n                type: 'SET_FIND_VALUE',\r\n                payload: ''\r\n            });\r\n\r\n            dispatch({\r\n                type: 'SET_FILTER_VALUE',\r\n                payload: 'all'\r\n            });\r\n\r\n            dispatch({\r\n                type: 'FILTER_TODO'\r\n            });\r\n\r\n            dispatch({\r\n                type: 'SHOW_ALERT',\r\n                payload: 'add'\r\n            });\r\n\r\n            input.clear()\r\n        } else {\r\n            inputEl.current.focus()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Form onSubmit={submitHandler}>\r\n            <InputGroup className=\"mb-3\">\r\n                <FormControl\r\n                    className='add-todo-input'\r\n                    ref={inputEl}\r\n                    {...input.bind}\r\n                />\r\n                <InputGroup.Append>\r\n                    <Button\r\n                        type='submit'\r\n                        variant='secondary'\r\n                        className='add-todo-btn'\r\n                    >\r\n                        Add Todo\r\n                    </Button>\r\n                </InputGroup.Append>\r\n            </InputGroup>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default AddTodo","import React from 'react';\r\nimport './loader.css';\r\n\r\nfunction Loader() {\r\n    return (\r\n        <div className=\"loadingio-spinner-spinner-wg4s9mzo1k\"><div className=\"ldio-enyzatthhyk\">\r\n            <div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div>\r\n        </div></div>\r\n    )\r\n}\r\n\r\nexport default Loader;","const Reducer = (state, { type, payload }) => {\r\n    switch (type) {\r\n        case 'SET_LOADING':\r\n            return {\r\n                ...state,\r\n                loading: payload\r\n            }\r\n        case 'GET_TODOS':\r\n            return {\r\n                ...state,\r\n                todos: payload,\r\n                filteredTodos: payload\r\n            }\r\n        case 'ADD_TODO':\r\n            return {\r\n                ...state,\r\n                todos: [\r\n                    ...state.todos, {\r\n                        id: Date.now(),\r\n                        completed: false,\r\n                        title: payload\r\n                    }\r\n                ]\r\n            }\r\n        case 'REMOVE_TODO':\r\n            return {\r\n                ...state,\r\n                todos: state.todos.filter(item => item.id !== payload),\r\n                filteredTodos: state.filteredTodos.filter(item => item.id !== payload)\r\n            }\r\n        case 'TOGGLE_TODO':\r\n            return {\r\n                ...state,\r\n                todos: state.todos.map(item => {\r\n                    if (item.id === payload) {\r\n                        item.completed = !item.completed;\r\n                    }\r\n\r\n                    return item;\r\n                })\r\n            }\r\n        case 'SET_MODAL':\r\n            return {\r\n                ...state,\r\n                modalOpened: payload\r\n            }\r\n        case 'SET_NEWTODO_VALUE':\r\n            return {\r\n                ...state,\r\n                addTodoValue: payload\r\n            }\r\n        case 'SET_FIND_VALUE':\r\n            return {\r\n                ...state,\r\n                findTodoValue: payload\r\n            }\r\n        case 'SET_FILTER_VALUE':\r\n            return {\r\n                ...state,\r\n                filterValue: payload\r\n            }\r\n        case 'FILTER_TODO':\r\n            return {\r\n                ...state,\r\n                filteredTodos: state.todos.filter(item => {\r\n                    if (state.filterValue === 'all') {\r\n                        return item.title.includes(state.findTodoValue);\r\n                    }\r\n\r\n                    if (state.filterValue === 'current') {\r\n                        return !item.completed && item.title.includes(state.findTodoValue)\r\n                    }\r\n\r\n                    if (state.filterValue === 'done') {\r\n                        return item.completed && item.title.includes(state.findTodoValue)\r\n                    }\r\n\r\n                    return item;\r\n                })\r\n            }\r\n        case 'SHOW_ALERT':\r\n            return {\r\n                ...state,\r\n                alerts: [\r\n                    ...state.alerts,\r\n                    {\r\n                        id: Date.now(),\r\n                        type: payload\r\n                    }\r\n                ]\r\n            }\r\n        case 'REMOVE_ALERT':\r\n            return {\r\n                ...state,\r\n                alerts: state.alerts.filter(item => item.id !== payload)\r\n            }\r\n        default:\r\n            break;\r\n    }\r\n}\r\n\r\nexport default Reducer;","import React from 'react';\r\nimport { Container, Jumbotron } from 'react-bootstrap';\r\n\r\nfunction About() {\r\n    return (\r\n        <Container>\r\n            <Jumbotron>\r\n                <h1>This is about page!</h1>\r\n                <p>\r\n                    Consequatur quos rerum aut molestiae non nobis ratione voluptas. Quis odio nemo qui esse. Sint vel in voluptas. Nisi est nulla. Voluptatem officiis rerum ea id blanditiis nostrum sequi veniam pariatur.\r\n                    Et consequatur voluptatem adipisci quaerat perferendis autem. Dolorem aut est aut occaecati omnis velit. Aut assumenda amet eos sed aut.\r\n                    Sapiente quod iste sit est soluta nesciunt rerum. Nam inventore pariatur exercitationem sit dicta. Unde ex et earum quia. Eaque aut officiis consequatur quo fuga enim voluptate. Molestiae molestiae omnis. Et esse qui nisi exercitationem.\r\n                </p>\r\n            </Jumbotron>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default About;","import React from 'react';\r\nimport { Button, Container, Jumbotron } from 'react-bootstrap';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction TodoItemDetails({ todos }) {\r\n    let { id } = useParams();\r\n    let todo = todos.filter(item => item.id === +id)[0];\r\n    let history = useHistory();\r\n\r\n    const backBtnHandler = () => {\r\n        history.push('/');\r\n    }\r\n\r\n    return (\r\n        <Container className='text-center'>\r\n            <Jumbotron>\r\n                <h2>Task id: {id}</h2>\r\n                <h3> {todo.title} </h3>\r\n                <Button\r\n                    variant='primary'\r\n                    className='mt-4'\r\n                    onClick={backBtnHandler}\r\n                >\r\n                    Go back\r\n                </Button>\r\n            </Jumbotron>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default TodoItemDetails;\r\n\r\nTodoItemDetails.propTypes = {\r\n    todos: PropTypes.arrayOf(PropTypes.object).isRequired\r\n}","import React, { useContext } from 'react';\r\nimport { Form } from 'react-bootstrap';\r\nimport Context from '../state/context';\r\n\r\nfunction TodoFind() {\r\n    const { state, dispatch } = useContext(Context);\r\n\r\n    function findHandler(e) {\r\n        dispatch({\r\n            type: 'SET_FIND_VALUE',\r\n            payload: e.target.value\r\n        });\r\n        dispatch({\r\n            type: 'FILTER_TODO'\r\n        });\r\n    }\r\n\r\n    return (\r\n        <Form>\r\n            <Form.Group>\r\n                <Form.Control\r\n                    type=\"text\"\r\n                    placeholder='Find task'\r\n                    value={state.findTodoValue}\r\n                    onChange={(e) => findHandler(e)}\r\n                />\r\n            </Form.Group>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default TodoFind;","import React, { useContext } from 'react';\r\nimport { Form } from 'react-bootstrap';\r\nimport Context from '../state/context';\r\n\r\nfunction TodoFilter() {\r\n    const { state, dispatch } = useContext(Context);\r\n\r\n    function filterClick(e) {\r\n        dispatch({\r\n            type: 'SET_FILTER_VALUE',\r\n            payload: e.target.value\r\n        });\r\n        dispatch({\r\n            type: 'FILTER_TODO'\r\n        });\r\n    }\r\n\r\n    return (\r\n        <Form className='todo-filter-wrap mb-3'>\r\n            <Form.Check\r\n                inline\r\n                label='All'\r\n                type='radio'\r\n                className='flex-column-reverse'\r\n                id='todo-all'\r\n                value='all'\r\n                checked={state.filterValue === 'all'}\r\n                onChange={(e) => filterClick(e)}\r\n            />\r\n            <Form.Check\r\n                inline\r\n                label='In progress'\r\n                type='radio'\r\n                className='flex-column-reverse'\r\n                id=\"todo-current\"\r\n                value='current'\r\n                checked={state.filterValue === 'current'}\r\n                onChange={(e) => filterClick(e)}\r\n            />\r\n            <Form.Check\r\n                inline\r\n                label='Done'\r\n                type='radio'\r\n                className='flex-column-reverse'\r\n                id='todo-done'\r\n                value='done'\r\n                checked={state.filterValue === 'done'}\r\n                onChange={(e) => filterClick(e)}\r\n            />\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default TodoFilter;","import React from 'react';\r\nimport { Nav, Navbar } from 'react-bootstrap';\r\nimport { NavLink, useHistory } from 'react-router-dom';\r\n\r\nexport const TodoNavbar = () => {\r\n    const history = useHistory();\r\n\r\n    const brandClickHandler = () => {\r\n        history.push('/');\r\n    }\r\n    return (\r\n        <Navbar bg='light' className='justify-content-between mb-5'>\r\n            <Navbar.Brand\r\n                className='text-primary font-weight-bold'\r\n                onClick={brandClickHandler}\r\n            >\r\n                My Todo App\r\n            </Navbar.Brand>\r\n            <Nav className=\"mr-sm-2\">\r\n                <NavLink exact to='/' className='nav-link'>\r\n                    Todo\r\n            </NavLink>\r\n                <NavLink exact to='/about' className='nav-link'>\r\n                    About\r\n            </NavLink>\r\n            </Nav>\r\n        </Navbar>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useContext } from 'react';\r\nimport { Toast } from 'react-bootstrap';\r\nimport Context from '../state/context';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const TodoAlert = ({ id, type }) => {\r\n    const { dispatch } = useContext(Context);\r\n\r\n    const closeAlert = () => {\r\n        dispatch({ type: 'REMOVE_ALERT', payload: id })\r\n    }\r\n\r\n    let alertText;\r\n\r\n    switch (type) {\r\n        case 'add':\r\n            alertText = 'todo added!'\r\n            break;\r\n        case 'remove':\r\n            alertText = 'todo removed!'\r\n            break;\r\n        default:\r\n            alertText = ''\r\n    }\r\n\r\n    return (\r\n        <Toast\r\n            autohide\r\n            delay={3000}\r\n            animation={false}\r\n            onClose={closeAlert}\r\n            className='todo-alert'\r\n            style={{ minWidth: '150px' }}\r\n        >\r\n            <Toast.Header>\r\n                <strong className='mr-auto'>Todo app</strong>\r\n            </Toast.Header>\r\n            <Toast.Body>\r\n                {alertText}\r\n            </Toast.Body>\r\n        </Toast>\r\n    )\r\n}\r\n\r\nTodoAlert.propTypes = {\r\n    id: PropTypes.number,\r\n    type: PropTypes.string\r\n}","import React from 'react';\r\nimport { useContext } from 'react';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\nimport Context from '../state/context';\r\nimport { TodoAlert } from './TodoAlert';\r\n\r\nexport const TodoAlertsList = () => {\r\n    const { state } = useContext(Context);\r\n\r\n    return (\r\n        <div style={{\r\n            position: 'absolute',\r\n            top: '80px',\r\n            right: '10px',\r\n            zIndex: 10\r\n        }}>\r\n            <TransitionGroup component={null}>\r\n                {\r\n                    state.alerts.map((toast, i) => (\r\n                        <CSSTransition\r\n                            key={toast.id}\r\n                            timeout={{ enter: 300 }}\r\n                            classNames='todo-alert'\r\n                        >\r\n                            <TodoAlert\r\n                                id={toast.id}\r\n                                type={toast.type}\r\n                            />\r\n                        </CSSTransition>\r\n                    ))\r\n                }\r\n            </TransitionGroup>\r\n        </div >\r\n    )\r\n}","import React, { useEffect, useReducer } from 'react';\r\nimport TodoList from './components/TodoList';\r\nimport Context from './state/context';\r\nimport AddTodo from './components/AddTodo';\r\nimport Loader from './components/Loader';\r\n// import Modal from './Modal/Modal';\r\nimport Reducer from './state/Reducer';\r\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\r\nimport About from './components/About';\r\nimport TodoItemDetails from './components/TodoItemDetails';\r\nimport TodoFind from './components/TodoFind';\r\nimport TodoFilter from './components/TodoFilter';\r\nimport { Col, Container, Row } from 'react-bootstrap';\r\nimport { TodoNavbar } from './components/TodoNavbar';\r\nimport { TodoAlertsList } from './components/TodoAlertsList';\r\n\r\nfunction App() {\r\n    const initialState = {\r\n        todos: [],\r\n        filteredTodos: [],\r\n        loading: true,\r\n        modalOpened: false,\r\n        addTodoValue: '',\r\n        findTodoValue: '',\r\n        filterValue: 'all',\r\n        alerts: []\r\n    }\r\n\r\n    const [state, dispatch] = useReducer(Reducer, initialState);\r\n\r\n    useEffect(() => {\r\n        fetch('http://my-json-server.typicode.com/borishere/fake-server/todos')\r\n            .then(response => response.json())\r\n            .then(todos => setTimeout(() => {\r\n                dispatch({\r\n                    type: 'GET_TODOS',\r\n                    payload: todos\r\n                });\r\n                dispatch({\r\n                    type: 'SET_LOADING',\r\n                    payload: false\r\n                });\r\n            }, 1000));\r\n    }, [])\r\n\r\n    return (\r\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n            <TodoNavbar />\r\n            <Switch>\r\n                <Route exact path='/'>\r\n                    <Context.Provider value={{ state, dispatch }}>\r\n                        <Container fluid='md' className='text-center'>\r\n                            <TodoAlertsList />\r\n                            <Row>\r\n                                <Col>\r\n                                    <TodoFilter />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col>\r\n                                    <TodoFind />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col>\r\n                                    <AddTodo />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col>\r\n                                    {\r\n                                        state.loading && <Loader />\r\n                                    }\r\n                                    {\r\n                                        state.filteredTodos.length ?\r\n                                            <TodoList todos={state.filteredTodos} />\r\n                                            :\r\n                                            state.loading ? '' : <h3>No todos found!</h3>\r\n                                    }\r\n                                </Col>\r\n                            </Row>\r\n                        </Container>\r\n                    </Context.Provider>\r\n                </Route>\r\n                <Route exact path='/about'>\r\n                    <About />\r\n                </Route>\r\n                <Route path='/:id'>\r\n                    <TodoItemDetails todos={state.filteredTodos} />\r\n                </Route>\r\n            </Switch>\r\n        </BrowserRouter>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}